`timescale 1ns / 1ps

module Fibanocci(clk,an,ca,fibanocci);
input clk;
reg [3:0]a,b;
output reg [7:0]an,ca;
output reg [3:0]fibanocci;
reg [2:0]count;
reg clk1=0;
integer i=0;
always @(posedge clk)
begin
i<=i+1;
if(i==50000000)
begin
clk1<=~clk1;
i<=0;
end
end


initial 
begin
a=0;
b=1;
fibanocci=0;
count=0;
end

always @(posedge clk)
begin
count<=count+1;
if(count<7)
begin
a=b;
b=fibanocci;
fibanocci=a+b;
end
else
count<=0;
end

initial
begin
an=8'b1111_1110;
end
always @(posedge clk)
begin
case(fibanocci)
4'h0:ca<=8'b0000_0011;
4'h1:ca<=8'b1001_1111;
4'h2:ca<=8'b0010_0101;
4'h3:ca<=8'b0000_1101;
4'h4:ca<=8'b1001_1001;
4'h5:ca<=8'b0100_1001;
4'h6:ca<=8'b0100_0001;
4'h7:ca<=8'b0001_1111;
4'h8:ca<=8'b0000_0001;
4'h9:ca<=8'b0000_1001;
4'hA:ca<=8'b0001_0001;
4'hB:ca<=8'b1100_0001;
4'hC:ca<=8'b0110_0011;
4'hD:ca<=8'b1000_0101;
4'hE:ca<=8'b0110_0001;
4'hF:ca<=8'b0111_0001;
default:ca<=8'b1111_1111;
endcase
end
endmodule
